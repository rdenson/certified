---
- name: Generate Host Keystore
  gather_facts: false
  hosts: "{{ affected_hosts }}"
  become: yes
  tasks:
    # place the CA certificate temporarily on the host
    # used when creating the PKCS12 data file
    - name: copy CA cert to host
      copy:
        src: "../../{{ pki.certificates.ca.local_path }}/{{ pki.certificates.ca.alias }}.crt"
        dest: "/tmp/{{ pki.certificates.ca.alias }}.crt"
        owner: root
        group: root
        mode: 0755

    ### Create a Host Specific Java Keystore
    # first step to create the JKS file is creating a PKCS12 data file
    # however, we need a few host specific things:
    #   - private key
    #   - certificate
    #   - CA certificate
    # let's verify that our cert, CSR and key match
    - name: get MD5 hash of certificate
      shell: >
        openssl x509
        -noout
        -modulus
        -in {{ pki.certificates.host.path }} |
        openssl md5 |
        cut -d' ' -f2
      register: cert_hash
    - name: get MD5 hash of certificate signing request
      shell: >
        openssl req
        -noout
        -modulus
        -in {{ pki.host.certificate_signing_request.path }} |
        openssl md5 |
        cut -d' ' -f2
      register: csr_hash
    - name: get MD5 hash of private key
      shell: >
        openssl rsa
        -noout
        -modulus
        -in {{ pki.host.key.path }} |
        openssl md5 |
        cut -d' ' -f2
      register: key_hash

    # actual comparison of certificate hash to cert key and CSR
    - name: compare MD5 hashes (will skip if hashes match)
      fail:
        msg: "cert hash comparison to key and CSR does not match"
      # ignoring errors so we can continue (although some tasks may not continue)
      ignore_errors: yes
      register: dependency_check
      when: cert_hash.stdout != key_hash.stdout or cert_hash.stdout != csr_hash.stdout

    - name: generate the host specific PKCS12 container
      shell: >
        openssl pkcs12
        -export
        -in {{ pki.certificates.host.path }}
        -inkey {{ pki.host.key.path }}
        -chain
        -CAfile /tmp/{{ pki.certificates.ca.alias }}.crt
        -name host_bundle
        -out {{ pki.host.pkcs12_bundle.path }}
        -password pass:{{ secrets.webservice.keystore_password }}
      when: dependency_check|succeeded

    # now we can create the JKS using the PKCS12 data file
    - name: generate a JKS from the p12 file
      shell: >
        keytool
        -importkeystore
        -deststorepass {{ pki.host.keystore.password }}
        -destkeystore {{ pki.host.keystore.path }}
        -srckeystore {{ pki.host.pkcs12_bundle.path }}
        -srcstoretype PKCS12
        -srcstorepass {{ pki.host.pkcs12_bundle.password }}
      when: dependency_check|succeeded

    ### Cleanup
    - name: remove CA cert copied to the host earlier
      file:
        state: absent
        path: "/tmp/{{ pki.certificates.ca.alias }}.crt"
